
LAB3_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d08  08002d08  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002d08  08002d08  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d08  08002d08  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000040  08002d50  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002d50  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098e0  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c10  00000000  00000000  00029949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ae  00000000  00000000  0002c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4eb  00000000  00000000  00043a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008269a  00000000  00000000  0004ff51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d25eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c4  00000000  00000000  000d2640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ccc 	.word	0x08002ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002ccc 	.word	0x08002ccc

0800014c <display7SEG_Mode>:
 *      Author: DELL
 */

#include "7seg.h"

void display7SEG_Mode(int counter) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//led display number 0 by enable 6 ports as follow (reset state)
	if (counter == 0) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d129      	bne.n	80001ae <display7SEG_Mode+0x62>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000160:	48d3      	ldr	r0, [pc, #844]	; (80004b0 <display7SEG_Mode+0x364>)
 8000162:	f001 fd92 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016c:	48d0      	ldr	r0, [pc, #832]	; (80004b0 <display7SEG_Mode+0x364>)
 800016e:	f001 fd8c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000178:	48cd      	ldr	r0, [pc, #820]	; (80004b0 <display7SEG_Mode+0x364>)
 800017a:	f001 fd86 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000184:	48ca      	ldr	r0, [pc, #808]	; (80004b0 <display7SEG_Mode+0x364>)
 8000186:	f001 fd80 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000190:	48c7      	ldr	r0, [pc, #796]	; (80004b0 <display7SEG_Mode+0x364>)
 8000192:	f001 fd7a 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800019c:	48c4      	ldr	r0, [pc, #784]	; (80004b0 <display7SEG_Mode+0x364>)
 800019e:	f001 fd74 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001a8:	48c1      	ldr	r0, [pc, #772]	; (80004b0 <display7SEG_Mode+0x364>)
 80001aa:	f001 fd6e 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 1 by enable 2 ports as follow (reset state)
	if (counter == 1) {
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d129      	bne.n	8000208 <display7SEG_Mode+0xbc>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ba:	48bd      	ldr	r0, [pc, #756]	; (80004b0 <display7SEG_Mode+0x364>)
 80001bc:	f001 fd65 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c6:	48ba      	ldr	r0, [pc, #744]	; (80004b0 <display7SEG_Mode+0x364>)
 80001c8:	f001 fd5f 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d2:	48b7      	ldr	r0, [pc, #732]	; (80004b0 <display7SEG_Mode+0x364>)
 80001d4:	f001 fd59 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001de:	48b4      	ldr	r0, [pc, #720]	; (80004b0 <display7SEG_Mode+0x364>)
 80001e0:	f001 fd53 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	48b1      	ldr	r0, [pc, #708]	; (80004b0 <display7SEG_Mode+0x364>)
 80001ec:	f001 fd4d 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f6:	48ae      	ldr	r0, [pc, #696]	; (80004b0 <display7SEG_Mode+0x364>)
 80001f8:	f001 fd47 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000202:	48ab      	ldr	r0, [pc, #684]	; (80004b0 <display7SEG_Mode+0x364>)
 8000204:	f001 fd41 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 2 by enable 5 ports as follow (reset state)
	if (counter == 2) {
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b02      	cmp	r3, #2
 800020c:	d129      	bne.n	8000262 <display7SEG_Mode+0x116>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	48a6      	ldr	r0, [pc, #664]	; (80004b0 <display7SEG_Mode+0x364>)
 8000216:	f001 fd38 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	48a3      	ldr	r0, [pc, #652]	; (80004b0 <display7SEG_Mode+0x364>)
 8000222:	f001 fd32 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800022c:	48a0      	ldr	r0, [pc, #640]	; (80004b0 <display7SEG_Mode+0x364>)
 800022e:	f001 fd2c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	489d      	ldr	r0, [pc, #628]	; (80004b0 <display7SEG_Mode+0x364>)
 800023a:	f001 fd26 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000244:	489a      	ldr	r0, [pc, #616]	; (80004b0 <display7SEG_Mode+0x364>)
 8000246:	f001 fd20 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000250:	4897      	ldr	r0, [pc, #604]	; (80004b0 <display7SEG_Mode+0x364>)
 8000252:	f001 fd1a 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025c:	4894      	ldr	r0, [pc, #592]	; (80004b0 <display7SEG_Mode+0x364>)
 800025e:	f001 fd14 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 3 by enable 5 ports as follow (reset state)
	if (counter == 3) {
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b03      	cmp	r3, #3
 8000266:	d129      	bne.n	80002bc <display7SEG_Mode+0x170>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	4890      	ldr	r0, [pc, #576]	; (80004b0 <display7SEG_Mode+0x364>)
 8000270:	f001 fd0b 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027a:	488d      	ldr	r0, [pc, #564]	; (80004b0 <display7SEG_Mode+0x364>)
 800027c:	f001 fd05 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000286:	488a      	ldr	r0, [pc, #552]	; (80004b0 <display7SEG_Mode+0x364>)
 8000288:	f001 fcff 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000292:	4887      	ldr	r0, [pc, #540]	; (80004b0 <display7SEG_Mode+0x364>)
 8000294:	f001 fcf9 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029e:	4884      	ldr	r0, [pc, #528]	; (80004b0 <display7SEG_Mode+0x364>)
 80002a0:	f001 fcf3 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002aa:	4881      	ldr	r0, [pc, #516]	; (80004b0 <display7SEG_Mode+0x364>)
 80002ac:	f001 fced 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b6:	487e      	ldr	r0, [pc, #504]	; (80004b0 <display7SEG_Mode+0x364>)
 80002b8:	f001 fce7 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 4 by enable 4 ports as follow (reset state)
	if (counter == 4) {
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d129      	bne.n	8000316 <display7SEG_Mode+0x1ca>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c8:	4879      	ldr	r0, [pc, #484]	; (80004b0 <display7SEG_Mode+0x364>)
 80002ca:	f001 fcde 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d4:	4876      	ldr	r0, [pc, #472]	; (80004b0 <display7SEG_Mode+0x364>)
 80002d6:	f001 fcd8 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e0:	4873      	ldr	r0, [pc, #460]	; (80004b0 <display7SEG_Mode+0x364>)
 80002e2:	f001 fcd2 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ec:	4870      	ldr	r0, [pc, #448]	; (80004b0 <display7SEG_Mode+0x364>)
 80002ee:	f001 fccc 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	486d      	ldr	r0, [pc, #436]	; (80004b0 <display7SEG_Mode+0x364>)
 80002fa:	f001 fcc6 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000304:	486a      	ldr	r0, [pc, #424]	; (80004b0 <display7SEG_Mode+0x364>)
 8000306:	f001 fcc0 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000310:	4867      	ldr	r0, [pc, #412]	; (80004b0 <display7SEG_Mode+0x364>)
 8000312:	f001 fcba 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 5 by enable 5 ports as follow (reset state)
	if (counter == 5) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b05      	cmp	r3, #5
 800031a:	d129      	bne.n	8000370 <display7SEG_Mode+0x224>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000322:	4863      	ldr	r0, [pc, #396]	; (80004b0 <display7SEG_Mode+0x364>)
 8000324:	f001 fcb1 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	4860      	ldr	r0, [pc, #384]	; (80004b0 <display7SEG_Mode+0x364>)
 8000330:	f001 fcab 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	485d      	ldr	r0, [pc, #372]	; (80004b0 <display7SEG_Mode+0x364>)
 800033c:	f001 fca5 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000346:	485a      	ldr	r0, [pc, #360]	; (80004b0 <display7SEG_Mode+0x364>)
 8000348:	f001 fc9f 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000352:	4857      	ldr	r0, [pc, #348]	; (80004b0 <display7SEG_Mode+0x364>)
 8000354:	f001 fc99 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035e:	4854      	ldr	r0, [pc, #336]	; (80004b0 <display7SEG_Mode+0x364>)
 8000360:	f001 fc93 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036a:	4851      	ldr	r0, [pc, #324]	; (80004b0 <display7SEG_Mode+0x364>)
 800036c:	f001 fc8d 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 6 by enable 6 ports as follow (reset state)
	if (counter == 6) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b06      	cmp	r3, #6
 8000374:	d129      	bne.n	80003ca <display7SEG_Mode+0x27e>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800037c:	484c      	ldr	r0, [pc, #304]	; (80004b0 <display7SEG_Mode+0x364>)
 800037e:	f001 fc84 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000388:	4849      	ldr	r0, [pc, #292]	; (80004b0 <display7SEG_Mode+0x364>)
 800038a:	f001 fc7e 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000394:	4846      	ldr	r0, [pc, #280]	; (80004b0 <display7SEG_Mode+0x364>)
 8000396:	f001 fc78 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a0:	4843      	ldr	r0, [pc, #268]	; (80004b0 <display7SEG_Mode+0x364>)
 80003a2:	f001 fc72 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ac:	4840      	ldr	r0, [pc, #256]	; (80004b0 <display7SEG_Mode+0x364>)
 80003ae:	f001 fc6c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b8:	483d      	ldr	r0, [pc, #244]	; (80004b0 <display7SEG_Mode+0x364>)
 80003ba:	f001 fc66 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c4:	483a      	ldr	r0, [pc, #232]	; (80004b0 <display7SEG_Mode+0x364>)
 80003c6:	f001 fc60 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 7 by enable 3 ports as follow (reset state)
	if (counter == 7) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d129      	bne.n	8000424 <display7SEG_Mode+0x2d8>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d6:	4836      	ldr	r0, [pc, #216]	; (80004b0 <display7SEG_Mode+0x364>)
 80003d8:	f001 fc57 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	4833      	ldr	r0, [pc, #204]	; (80004b0 <display7SEG_Mode+0x364>)
 80003e4:	f001 fc51 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ee:	4830      	ldr	r0, [pc, #192]	; (80004b0 <display7SEG_Mode+0x364>)
 80003f0:	f001 fc4b 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fa:	482d      	ldr	r0, [pc, #180]	; (80004b0 <display7SEG_Mode+0x364>)
 80003fc:	f001 fc45 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000406:	482a      	ldr	r0, [pc, #168]	; (80004b0 <display7SEG_Mode+0x364>)
 8000408:	f001 fc3f 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000412:	4827      	ldr	r0, [pc, #156]	; (80004b0 <display7SEG_Mode+0x364>)
 8000414:	f001 fc39 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041e:	4824      	ldr	r0, [pc, #144]	; (80004b0 <display7SEG_Mode+0x364>)
 8000420:	f001 fc33 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 8 by enable 7 ports as follow (reset state)
	if (counter == 8) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b08      	cmp	r3, #8
 8000428:	d129      	bne.n	800047e <display7SEG_Mode+0x332>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	481f      	ldr	r0, [pc, #124]	; (80004b0 <display7SEG_Mode+0x364>)
 8000432:	f001 fc2a 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043c:	481c      	ldr	r0, [pc, #112]	; (80004b0 <display7SEG_Mode+0x364>)
 800043e:	f001 fc24 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000448:	4819      	ldr	r0, [pc, #100]	; (80004b0 <display7SEG_Mode+0x364>)
 800044a:	f001 fc1e 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000454:	4816      	ldr	r0, [pc, #88]	; (80004b0 <display7SEG_Mode+0x364>)
 8000456:	f001 fc18 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <display7SEG_Mode+0x364>)
 8000462:	f001 fc12 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046c:	4810      	ldr	r0, [pc, #64]	; (80004b0 <display7SEG_Mode+0x364>)
 800046e:	f001 fc0c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <display7SEG_Mode+0x364>)
 800047a:	f001 fc06 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 9 by enable 6 ports as follow (reset state)
	if (counter == 9) {
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b09      	cmp	r3, #9
 8000482:	d12c      	bne.n	80004de <display7SEG_Mode+0x392>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048a:	4809      	ldr	r0, [pc, #36]	; (80004b0 <display7SEG_Mode+0x364>)
 800048c:	f001 fbfd 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <display7SEG_Mode+0x364>)
 8000498:	f001 fbf7 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a2:	4803      	ldr	r0, [pc, #12]	; (80004b0 <display7SEG_Mode+0x364>)
 80004a4:	f001 fbf1 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ae:	e001      	b.n	80004b4 <display7SEG_Mode+0x368>
 80004b0:	40010800 	.word	0x40010800
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <display7SEG_Mode+0x39c>)
 80004b6:	f001 fbe8 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <display7SEG_Mode+0x39c>)
 80004c2:	f001 fbe2 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <display7SEG_Mode+0x39c>)
 80004ce:	f001 fbdc 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <display7SEG_Mode+0x39c>)
 80004da:	f001 fbd6 	bl	8001c8a <HAL_GPIO_WritePin>
	}
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010800 	.word	0x40010800

080004ec <display7SEG_Value>:
void display7SEG_Value(int counter) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	//led display number 0 by enable 6 ports as follow (reset state)
	if (counter == 0) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d124      	bne.n	8000544 <display7SEG_Value+0x58>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2108      	movs	r1, #8
 80004fe:	48c7      	ldr	r0, [pc, #796]	; (800081c <display7SEG_Value+0x330>)
 8000500:	f001 fbc3 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2110      	movs	r1, #16
 8000508:	48c4      	ldr	r0, [pc, #784]	; (800081c <display7SEG_Value+0x330>)
 800050a:	f001 fbbe 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	48c2      	ldr	r0, [pc, #776]	; (800081c <display7SEG_Value+0x330>)
 8000514:	f001 fbb9 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	48bf      	ldr	r0, [pc, #764]	; (800081c <display7SEG_Value+0x330>)
 800051e:	f001 fbb4 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	48bd      	ldr	r0, [pc, #756]	; (800081c <display7SEG_Value+0x330>)
 8000528:	f001 fbaf 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	48ba      	ldr	r0, [pc, #744]	; (800081c <display7SEG_Value+0x330>)
 8000534:	f001 fba9 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	48b7      	ldr	r0, [pc, #732]	; (800081c <display7SEG_Value+0x330>)
 8000540:	f001 fba3 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 1 by enable 2 ports as follow (reset state)
	if (counter == 1) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d124      	bne.n	8000594 <display7SEG_Value+0xa8>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	48b3      	ldr	r0, [pc, #716]	; (800081c <display7SEG_Value+0x330>)
 8000550:	f001 fb9b 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2110      	movs	r1, #16
 8000558:	48b0      	ldr	r0, [pc, #704]	; (800081c <display7SEG_Value+0x330>)
 800055a:	f001 fb96 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	48ae      	ldr	r0, [pc, #696]	; (800081c <display7SEG_Value+0x330>)
 8000564:	f001 fb91 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	48ab      	ldr	r0, [pc, #684]	; (800081c <display7SEG_Value+0x330>)
 800056e:	f001 fb8c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	48a9      	ldr	r0, [pc, #676]	; (800081c <display7SEG_Value+0x330>)
 8000578:	f001 fb87 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	48a6      	ldr	r0, [pc, #664]	; (800081c <display7SEG_Value+0x330>)
 8000584:	f001 fb81 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	48a3      	ldr	r0, [pc, #652]	; (800081c <display7SEG_Value+0x330>)
 8000590:	f001 fb7b 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 2 by enable 5 ports as follow (reset state)
	if (counter == 2) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d124      	bne.n	80005e4 <display7SEG_Value+0xf8>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	489f      	ldr	r0, [pc, #636]	; (800081c <display7SEG_Value+0x330>)
 80005a0:	f001 fb73 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2110      	movs	r1, #16
 80005a8:	489c      	ldr	r0, [pc, #624]	; (800081c <display7SEG_Value+0x330>)
 80005aa:	f001 fb6e 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2120      	movs	r1, #32
 80005b2:	489a      	ldr	r0, [pc, #616]	; (800081c <display7SEG_Value+0x330>)
 80005b4:	f001 fb69 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4897      	ldr	r0, [pc, #604]	; (800081c <display7SEG_Value+0x330>)
 80005be:	f001 fb64 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	4895      	ldr	r0, [pc, #596]	; (800081c <display7SEG_Value+0x330>)
 80005c8:	f001 fb5f 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d2:	4892      	ldr	r0, [pc, #584]	; (800081c <display7SEG_Value+0x330>)
 80005d4:	f001 fb59 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005de:	488f      	ldr	r0, [pc, #572]	; (800081c <display7SEG_Value+0x330>)
 80005e0:	f001 fb53 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 3 by enable 5 ports as follow (reset state)
	if (counter == 3) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d124      	bne.n	8000634 <display7SEG_Value+0x148>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2108      	movs	r1, #8
 80005ee:	488b      	ldr	r0, [pc, #556]	; (800081c <display7SEG_Value+0x330>)
 80005f0:	f001 fb4b 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4888      	ldr	r0, [pc, #544]	; (800081c <display7SEG_Value+0x330>)
 80005fa:	f001 fb46 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	4886      	ldr	r0, [pc, #536]	; (800081c <display7SEG_Value+0x330>)
 8000604:	f001 fb41 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	4883      	ldr	r0, [pc, #524]	; (800081c <display7SEG_Value+0x330>)
 800060e:	f001 fb3c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	4881      	ldr	r0, [pc, #516]	; (800081c <display7SEG_Value+0x330>)
 8000618:	f001 fb37 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000622:	487e      	ldr	r0, [pc, #504]	; (800081c <display7SEG_Value+0x330>)
 8000624:	f001 fb31 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062e:	487b      	ldr	r0, [pc, #492]	; (800081c <display7SEG_Value+0x330>)
 8000630:	f001 fb2b 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 4 by enable 4 ports as follow (reset state)
	if (counter == 4) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d124      	bne.n	8000684 <display7SEG_Value+0x198>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2108      	movs	r1, #8
 800063e:	4877      	ldr	r0, [pc, #476]	; (800081c <display7SEG_Value+0x330>)
 8000640:	f001 fb23 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	4874      	ldr	r0, [pc, #464]	; (800081c <display7SEG_Value+0x330>)
 800064a:	f001 fb1e 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	4872      	ldr	r0, [pc, #456]	; (800081c <display7SEG_Value+0x330>)
 8000654:	f001 fb19 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	486f      	ldr	r0, [pc, #444]	; (800081c <display7SEG_Value+0x330>)
 800065e:	f001 fb14 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	486d      	ldr	r0, [pc, #436]	; (800081c <display7SEG_Value+0x330>)
 8000668:	f001 fb0f 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <display7SEG_Value+0x330>)
 8000674:	f001 fb09 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	4867      	ldr	r0, [pc, #412]	; (800081c <display7SEG_Value+0x330>)
 8000680:	f001 fb03 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 5 by enable 5 ports as follow (reset state)
	if (counter == 5) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b05      	cmp	r3, #5
 8000688:	d124      	bne.n	80006d4 <display7SEG_Value+0x1e8>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2108      	movs	r1, #8
 800068e:	4863      	ldr	r0, [pc, #396]	; (800081c <display7SEG_Value+0x330>)
 8000690:	f001 fafb 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2110      	movs	r1, #16
 8000698:	4860      	ldr	r0, [pc, #384]	; (800081c <display7SEG_Value+0x330>)
 800069a:	f001 faf6 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2120      	movs	r1, #32
 80006a2:	485e      	ldr	r0, [pc, #376]	; (800081c <display7SEG_Value+0x330>)
 80006a4:	f001 faf1 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	485b      	ldr	r0, [pc, #364]	; (800081c <display7SEG_Value+0x330>)
 80006ae:	f001 faec 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	4859      	ldr	r0, [pc, #356]	; (800081c <display7SEG_Value+0x330>)
 80006b8:	f001 fae7 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c2:	4856      	ldr	r0, [pc, #344]	; (800081c <display7SEG_Value+0x330>)
 80006c4:	f001 fae1 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ce:	4853      	ldr	r0, [pc, #332]	; (800081c <display7SEG_Value+0x330>)
 80006d0:	f001 fadb 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 6 by enable 6 ports as follow (reset state)
	if (counter == 6) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d124      	bne.n	8000724 <display7SEG_Value+0x238>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	484f      	ldr	r0, [pc, #316]	; (800081c <display7SEG_Value+0x330>)
 80006e0:	f001 fad3 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2110      	movs	r1, #16
 80006e8:	484c      	ldr	r0, [pc, #304]	; (800081c <display7SEG_Value+0x330>)
 80006ea:	f001 face 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <display7SEG_Value+0x330>)
 80006f4:	f001 fac9 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4847      	ldr	r0, [pc, #284]	; (800081c <display7SEG_Value+0x330>)
 80006fe:	f001 fac4 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	4845      	ldr	r0, [pc, #276]	; (800081c <display7SEG_Value+0x330>)
 8000708:	f001 fabf 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4842      	ldr	r0, [pc, #264]	; (800081c <display7SEG_Value+0x330>)
 8000714:	f001 fab9 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	483f      	ldr	r0, [pc, #252]	; (800081c <display7SEG_Value+0x330>)
 8000720:	f001 fab3 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 7 by enable 3 ports as follow (reset state)
	if (counter == 7) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b07      	cmp	r3, #7
 8000728:	d124      	bne.n	8000774 <display7SEG_Value+0x288>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2108      	movs	r1, #8
 800072e:	483b      	ldr	r0, [pc, #236]	; (800081c <display7SEG_Value+0x330>)
 8000730:	f001 faab 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2110      	movs	r1, #16
 8000738:	4838      	ldr	r0, [pc, #224]	; (800081c <display7SEG_Value+0x330>)
 800073a:	f001 faa6 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <display7SEG_Value+0x330>)
 8000744:	f001 faa1 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2140      	movs	r1, #64	; 0x40
 800074c:	4833      	ldr	r0, [pc, #204]	; (800081c <display7SEG_Value+0x330>)
 800074e:	f001 fa9c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	4831      	ldr	r0, [pc, #196]	; (800081c <display7SEG_Value+0x330>)
 8000758:	f001 fa97 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	482e      	ldr	r0, [pc, #184]	; (800081c <display7SEG_Value+0x330>)
 8000764:	f001 fa91 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	482b      	ldr	r0, [pc, #172]	; (800081c <display7SEG_Value+0x330>)
 8000770:	f001 fa8b 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 8 by enable 7 ports as follow (reset state)
	if (counter == 8) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b08      	cmp	r3, #8
 8000778:	d124      	bne.n	80007c4 <display7SEG_Value+0x2d8>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	4827      	ldr	r0, [pc, #156]	; (800081c <display7SEG_Value+0x330>)
 8000780:	f001 fa83 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2110      	movs	r1, #16
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <display7SEG_Value+0x330>)
 800078a:	f001 fa7e 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	4822      	ldr	r0, [pc, #136]	; (800081c <display7SEG_Value+0x330>)
 8000794:	f001 fa79 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2140      	movs	r1, #64	; 0x40
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <display7SEG_Value+0x330>)
 800079e:	f001 fa74 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <display7SEG_Value+0x330>)
 80007a8:	f001 fa6f 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b2:	481a      	ldr	r0, [pc, #104]	; (800081c <display7SEG_Value+0x330>)
 80007b4:	f001 fa69 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <display7SEG_Value+0x330>)
 80007c0:	f001 fa63 	bl	8001c8a <HAL_GPIO_WritePin>
	}
	//led display number 9 by enable 6 ports as follow (reset state)
	if (counter == 9) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b09      	cmp	r3, #9
 80007c8:	d124      	bne.n	8000814 <display7SEG_Value+0x328>
		HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <display7SEG_Value+0x330>)
 80007d0:	f001 fa5b 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <display7SEG_Value+0x330>)
 80007da:	f001 fa56 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <display7SEG_Value+0x330>)
 80007e4:	f001 fa51 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <display7SEG_Value+0x330>)
 80007ee:	f001 fa4c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <display7SEG_Value+0x330>)
 80007f8:	f001 fa47 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <display7SEG_Value+0x330>)
 8000804:	f001 fa41 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <display7SEG_Value+0x330>)
 8000810:	f001 fa3b 	bl	8001c8a <HAL_GPIO_WritePin>
	}
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40010c00 	.word	0x40010c00

08000820 <update7SEG_Mode>:
void update7SEG_Mode(int index, int data) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	switch (index) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b6f      	cmp	r3, #111	; 0x6f
 800082e:	d003      	beq.n	8000838 <update7SEG_Mode+0x18>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b70      	cmp	r3, #112	; 0x70
 8000834:	d017      	beq.n	8000866 <update7SEG_Mode+0x46>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, SET);
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, RESET);
		display7SEG_Mode(data % 10);
		break;
	default:
		break;
 8000836:	e032      	b.n	800089e <update7SEG_Mode+0x7e>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	481a      	ldr	r0, [pc, #104]	; (80008a8 <update7SEG_Mode+0x88>)
 8000840:	f001 fa23 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <update7SEG_Mode+0x88>)
 800084c:	f001 fa1d 	bl	8001c8a <HAL_GPIO_WritePin>
		display7SEG_Mode(data / 10);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <update7SEG_Mode+0x8c>)
 8000854:	fb82 1203 	smull	r1, r2, r2, r3
 8000858:	1092      	asrs	r2, r2, #2
 800085a:	17db      	asrs	r3, r3, #31
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fc74 	bl	800014c <display7SEG_Mode>
		break;
 8000864:	e01b      	b.n	800089e <update7SEG_Mode+0x7e>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086c:	480e      	ldr	r0, [pc, #56]	; (80008a8 <update7SEG_Mode+0x88>)
 800086e:	f001 fa0c 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <update7SEG_Mode+0x88>)
 800087a:	f001 fa06 	bl	8001c8a <HAL_GPIO_WritePin>
		display7SEG_Mode(data % 10);
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <update7SEG_Mode+0x8c>)
 8000882:	fb83 1302 	smull	r1, r3, r3, r2
 8000886:	1099      	asrs	r1, r3, #2
 8000888:	17d3      	asrs	r3, r2, #31
 800088a:	1ac9      	subs	r1, r1, r3
 800088c:	460b      	mov	r3, r1
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	440b      	add	r3, r1
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	1ad1      	subs	r1, r2, r3
 8000896:	4608      	mov	r0, r1
 8000898:	f7ff fc58 	bl	800014c <display7SEG_Mode>
		break;
 800089c:	bf00      	nop
	}
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	66666667 	.word	0x66666667

080008b0 <update7SEG_Value>:

void update7SEG_Value(int index, int data) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	switch (index) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2bde      	cmp	r3, #222	; 0xde
 80008be:	d003      	beq.n	80008c8 <update7SEG_Value+0x18>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2bdf      	cmp	r3, #223	; 0xdf
 80008c4:	d017      	beq.n	80008f6 <update7SEG_Value+0x46>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, SET);
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, RESET);
		display7SEG_Value(data % 10);
		break;
	default:
		break;
 80008c6:	e032      	b.n	800092e <update7SEG_Value+0x7e>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ce:	481a      	ldr	r0, [pc, #104]	; (8000938 <update7SEG_Value+0x88>)
 80008d0:	f001 f9db 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008da:	4817      	ldr	r0, [pc, #92]	; (8000938 <update7SEG_Value+0x88>)
 80008dc:	f001 f9d5 	bl	8001c8a <HAL_GPIO_WritePin>
		display7SEG_Value(data / 10);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <update7SEG_Value+0x8c>)
 80008e4:	fb82 1203 	smull	r1, r2, r2, r3
 80008e8:	1092      	asrs	r2, r2, #2
 80008ea:	17db      	asrs	r3, r3, #31
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fdfc 	bl	80004ec <display7SEG_Value>
		break;
 80008f4:	e01b      	b.n	800092e <update7SEG_Value+0x7e>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <update7SEG_Value+0x88>)
 80008fe:	f001 f9c4 	bl	8001c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <update7SEG_Value+0x88>)
 800090a:	f001 f9be 	bl	8001c8a <HAL_GPIO_WritePin>
		display7SEG_Value(data % 10);
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <update7SEG_Value+0x8c>)
 8000912:	fb83 1302 	smull	r1, r3, r3, r2
 8000916:	1099      	asrs	r1, r3, #2
 8000918:	17d3      	asrs	r3, r2, #31
 800091a:	1ac9      	subs	r1, r1, r3
 800091c:	460b      	mov	r3, r1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	1ad1      	subs	r1, r2, r3
 8000926:	4608      	mov	r0, r1
 8000928:	f7ff fde0 	bl	80004ec <display7SEG_Value>
		break;
 800092c:	bf00      	nop
	}
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010c00 	.word	0x40010c00
 800093c:	66666667 	.word	0x66666667

08000940 <segRun1>:

void segRun1() {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	update7SEG_Mode(MODE_0_7SEG, ledModeData);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <segRun1+0x20>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	206f      	movs	r0, #111	; 0x6f
 800094c:	f7ff ff68 	bl	8000820 <update7SEG_Mode>
	update7SEG_Value(VALUE_0_7SEG, ledValueData);
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <segRun1+0x24>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	20de      	movs	r0, #222	; 0xde
 8000958:	f7ff ffaa 	bl	80008b0 <update7SEG_Value>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000098 	.word	0x20000098
 8000964:	20000090 	.word	0x20000090

08000968 <segRun2>:

void segRun2() {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	update7SEG_Mode(MODE_1_7SEG, ledModeData);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <segRun2+0x20>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	2070      	movs	r0, #112	; 0x70
 8000974:	f7ff ff54 	bl	8000820 <update7SEG_Mode>
	update7SEG_Value(VALUE_1_7SEG, ledValueData);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <segRun2+0x24>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	20df      	movs	r0, #223	; 0xdf
 8000980:	f7ff ff96 	bl	80008b0 <update7SEG_Value>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000098 	.word	0x20000098
 800098c:	20000090 	.word	0x20000090

08000990 <isButtonPressed>:
	HAL_GPIO_WritePin(BUTTON_1_GPIO_Port, BUTTON_1_Pin, NORMAL_STATE);
	HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, NORMAL_STATE);
	HAL_GPIO_WritePin(BUTTON_3_GPIO_Port, BUTTON_3_Pin, NORMAL_STATE);
}

int isButtonPressed(int index) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <isButtonPressed+0x30>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d106      	bne.n	80009b2 <isButtonPressed+0x22>
		button_flag[index] = 0;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <isButtonPressed+0x30>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2100      	movs	r1, #0
 80009aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <isButtonPressed+0x24>
	}
	return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000084 	.word	0x20000084

080009c4 <subKeyProcess>:

void subKeyProcess(int index) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <subKeyProcess+0x1c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2101      	movs	r1, #1
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000084 	.word	0x20000084

080009e4 <getKeyInput>:

void getKeyInput() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e084      	b.n	8000afa <getKeyInput+0x116>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <getKeyInput+0x128>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f8:	4945      	ldr	r1, [pc, #276]	; (8000b10 <getKeyInput+0x12c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <getKeyInput+0x130>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a08:	4940      	ldr	r1, [pc, #256]	; (8000b0c <getKeyInput+0x128>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Read signal from user
		if (i == 0) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10a      	bne.n	8000a2c <getKeyInput+0x48>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,
 8000a16:	2101      	movs	r1, #1
 8000a18:	483f      	ldr	r0, [pc, #252]	; (8000b18 <getKeyInput+0x134>)
 8000a1a:	f001 f91f 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <getKeyInput+0x130>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a2a:	e01a      	b.n	8000a62 <getKeyInput+0x7e>
			BUTTON_1_Pin);
		} else if (i == 1) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d10a      	bne.n	8000a48 <getKeyInput+0x64>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,
 8000a32:	2102      	movs	r1, #2
 8000a34:	4838      	ldr	r0, [pc, #224]	; (8000b18 <getKeyInput+0x134>)
 8000a36:	f001 f911 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <getKeyInput+0x130>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a46:	e00c      	b.n	8000a62 <getKeyInput+0x7e>
			BUTTON_2_Pin);
		} else if (i == 2) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d109      	bne.n	8000a62 <getKeyInput+0x7e>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <getKeyInput+0x134>)
 8000a52:	f001 f903 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <getKeyInput+0x130>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			BUTTON_3_Pin);
		}
		//debouncing step
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000a62:	4a2b      	ldr	r2, [pc, #172]	; (8000b10 <getKeyInput+0x12c>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6a:	4928      	ldr	r1, [pc, #160]	; (8000b0c <getKeyInput+0x128>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d13e      	bne.n	8000af4 <getKeyInput+0x110>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 8000a76:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <getKeyInput+0x128>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a7e:	4925      	ldr	r1, [pc, #148]	; (8000b14 <getKeyInput+0x130>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d134      	bne.n	8000af4 <getKeyInput+0x110>
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <getKeyInput+0x130>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a92:	4922      	ldr	r1, [pc, #136]	; (8000b1c <getKeyInput+0x138>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d016      	beq.n	8000acc <getKeyInput+0xe8>
				longPressButtonBuffer[i] = buttonBuffer[i];
 8000a9e:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <getKeyInput+0x130>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <getKeyInput+0x138>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//when pressed, do subKeyProcess()
				if (buttonBuffer[i] == PRESSED_STATE) {
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <getKeyInput+0x130>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d11c      	bne.n	8000af4 <getKeyInput+0x110>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <getKeyInput+0x13c>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	21c8      	movs	r1, #200	; 0xc8
 8000ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff7d 	bl	80009c4 <subKeyProcess>
 8000aca:	e013      	b.n	8000af4 <getKeyInput+0x110>
				}
			}

			else {
				TimeOutForKeyPress[i]--;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <getKeyInput+0x13c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	4912      	ldr	r1, [pc, #72]	; (8000b20 <getKeyInput+0x13c>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <getKeyInput+0x13c>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d104      	bne.n	8000af4 <getKeyInput+0x110>
					longPressButtonBuffer[i] = NORMAL_STATE;
 8000aea:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <getKeyInput+0x138>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2101      	movs	r1, #1
 8000af0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	f77f af77 	ble.w	80009f0 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000018 	.word	0x20000018
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	20000000 	.word	0x20000000
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	20000024 	.word	0x20000024
 8000b20:	20000078 	.word	0x20000078

08000b24 <initValues>:
int redTime;

int ledModeData;
int ledValueData;

void initValues() {
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
	yellowTime = YELLOW_TIME;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <initValues+0x30>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	601a      	str	r2, [r3, #0]
	greenTime = GREEN_TIME;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <initValues+0x34>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	601a      	str	r2, [r3, #0]
	redTime = RED_TIME;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <initValues+0x38>)
 8000b36:	2205      	movs	r2, #5
 8000b38:	601a      	str	r2, [r3, #0]
	ledModeData = redTime;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <initValues+0x38>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <initValues+0x3c>)
 8000b40:	6013      	str	r3, [r2, #0]
	ledValueData = greenTime;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <initValues+0x34>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <initValues+0x40>)
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000094 	.word	0x20000094
 8000b58:	200000a0 	.word	0x200000a0
 8000b5c:	2000009c 	.word	0x2000009c
 8000b60:	20000098 	.word	0x20000098
 8000b64:	20000090 	.word	0x20000090

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fd8c 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f80e 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 f894 	bl	8000ca0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b78:	f000 f846 	bl	8000c08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <main+0x24>)
 8000b7e:	f001 fce1 	bl	8002544 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initValues();
 8000b82:	f7ff ffcf 	bl	8000b24 <initValues>
  while (1)
  {
    /* USER CODE END WHILE */
	  modeRun();
 8000b86:	f000 f8ff 	bl	8000d88 <modeRun>
 8000b8a:	e7fc      	b.n	8000b86 <main+0x1e>
 8000b8c:	200000a4 	.word	0x200000a4

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f88c 	bl	8002cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f890 	bl	8001cec <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f8d3 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fafc 	bl	80021ec <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 f8bf 	bl	8000d7c <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3740      	adds	r7, #64	; 0x40
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c2e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c3c:	2209      	movs	r2, #9
 8000c3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c4e:	f001 fc29 	bl	80024a4 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c58:	f000 f890 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c6a:	f001 fdbf 	bl	80027ec <HAL_TIM_ConfigClockSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c74:	f000 f882 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c86:	f001 ff8b 	bl	8002ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 f874 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000a4 	.word	0x200000a4

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <MX_GPIO_Init+0xb8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <MX_GPIO_Init+0xb8>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <MX_GPIO_Init+0xb8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_GPIO_Init+0xb8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_GPIO_Init+0xb8>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_GPIO_Init+0xb8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f64f 617e 	movw	r1, #65150	; 0xfe7e
 8000cea:	481c      	ldr	r0, [pc, #112]	; (8000d5c <MX_GPIO_Init+0xbc>)
 8000cec:	f000 ffcd 	bl	8001c8a <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 8000cf6:	481a      	ldr	r0, [pc, #104]	; (8000d60 <MX_GPIO_Init+0xc0>)
 8000cf8:	f000 ffc7 	bl	8001c8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin MODE_A_Pin MODE_B_Pin
                           MODE_C_Pin MODE_D_Pin MODE_E_Pin MODE_F_Pin
                           MODE_G_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000cfc:	f64f 637e 	movw	r3, #65150	; 0xfe7e
 8000d00:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_GPIO_Init+0xbc>)
 8000d16:	f000 fe27 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_GPIO_Init+0xc0>)
 8000d2e:	f000 fe1b 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_VAL_0_Pin EN_VAL_1_Pin EN_MODE_0_Pin EN_MODE_1_Pin
                           VALUE_A_Pin VALUE_B_Pin VALUE_C_Pin VALUE_D_Pin
                           VALUE_E_Pin VALUE_F_Pin VALUE_G_Pin */
  GPIO_InitStruct.Pin = EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000d32:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8000d36:	60bb      	str	r3, [r7, #8]
                          |VALUE_A_Pin|VALUE_B_Pin|VALUE_C_Pin|VALUE_D_Pin
                          |VALUE_E_Pin|VALUE_F_Pin|VALUE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2302      	movs	r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_GPIO_Init+0xc0>)
 8000d4c:	f000 fe0c 	bl	8001968 <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00

08000d64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d6c:	f000 fa8a 	bl	8001284 <timerRun>
	getKeyInput();
 8000d70:	f7ff fe38 	bl	80009e4 <getKeyInput>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <modeRun>:
#include "mode_control.h"

int seg_counter;
int tempVal;

void modeRun(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	switch(mode){
 8000d8c:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <modeRun+0x258>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	f200 8178 	bhi.w	8001086 <modeRun+0x2fe>
 8000d96:	a201      	add	r2, pc, #4	; (adr r2, 8000d9c <modeRun+0x14>)
 8000d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9c:	08000db1 	.word	0x08000db1
 8000da0:	08000dcb 	.word	0x08000dcb
 8000da4:	08000e4d 	.word	0x08000e4d
 8000da8:	08000f03 	.word	0x08000f03
 8000dac:	08000fb7 	.word	0x08000fb7
	case INIT:
		seg_counter = 2;
 8000db0:	4b8c      	ldr	r3, [pc, #560]	; (8000fe4 <modeRun+0x25c>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	601a      	str	r2, [r3, #0]
		segRun1();
 8000db6:	f7ff fdc3 	bl	8000940 <segRun1>
		setTimer2(500);
 8000dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dbe:	f000 fa45 	bl	800124c <setTimer2>
		mode = MODE1;
 8000dc2:	4b87      	ldr	r3, [pc, #540]	; (8000fe0 <modeRun+0x258>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
		break;
 8000dc8:	e166      	b.n	8001098 <modeRun+0x310>
	case MODE1:
		//In MODE1, we have 2 traffic systems to control
		mode1Run();
 8000dca:	f000 f973 	bl	80010b4 <mode1Run>
		if (timer2_flag == 1) {
 8000dce:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <modeRun+0x260>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d11e      	bne.n	8000e14 <modeRun+0x8c>
			setTimer2(500);
 8000dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dda:	f000 fa37 	bl	800124c <setTimer2>
			if (seg_counter == 2) {
 8000dde:	4b81      	ldr	r3, [pc, #516]	; (8000fe4 <modeRun+0x25c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d10f      	bne.n	8000e06 <modeRun+0x7e>
				segRun2();
 8000de6:	f7ff fdbf 	bl	8000968 <segRun2>
				ledValueData--;
 8000dea:	4b80      	ldr	r3, [pc, #512]	; (8000fec <modeRun+0x264>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a7e      	ldr	r2, [pc, #504]	; (8000fec <modeRun+0x264>)
 8000df2:	6013      	str	r3, [r2, #0]
				ledModeData--;
 8000df4:	4b7e      	ldr	r3, [pc, #504]	; (8000ff0 <modeRun+0x268>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	4a7d      	ldr	r2, [pc, #500]	; (8000ff0 <modeRun+0x268>)
 8000dfc:	6013      	str	r3, [r2, #0]
				seg_counter = 0;
 8000dfe:	4b79      	ldr	r3, [pc, #484]	; (8000fe4 <modeRun+0x25c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e001      	b.n	8000e0a <modeRun+0x82>
			} else {
				segRun1();
 8000e06:	f7ff fd9b 	bl	8000940 <segRun1>
			}
			seg_counter++;
 8000e0a:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <modeRun+0x25c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a74      	ldr	r2, [pc, #464]	; (8000fe4 <modeRun+0x25c>)
 8000e12:	6013      	str	r3, [r2, #0]
		}
		//if we press button 1, system will change to MODE2
		if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fdbb 	bl	8000990 <isButtonPressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	f040 8134 	bne.w	800108a <modeRun+0x302>
			setTimer2(500);
 8000e22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e26:	f000 fa11 	bl	800124c <setTimer2>
			tempVal = redTime;
 8000e2a:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <modeRun+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a72      	ldr	r2, [pc, #456]	; (8000ff8 <modeRun+0x270>)
 8000e30:	6013      	str	r3, [r2, #0]
			ledModeData = MODE2;
 8000e32:	4b6f      	ldr	r3, [pc, #444]	; (8000ff0 <modeRun+0x268>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	601a      	str	r2, [r3, #0]
			ledValueData = redTime;
 8000e38:	4b6e      	ldr	r3, [pc, #440]	; (8000ff4 <modeRun+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a6b      	ldr	r2, [pc, #428]	; (8000fec <modeRun+0x264>)
 8000e3e:	6013      	str	r3, [r2, #0]
			mode = MODE2;
 8000e40:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <modeRun+0x258>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	601a      	str	r2, [r3, #0]
			offAllLeds();
 8000e46:	f000 fb51 	bl	80014ec <offAllLeds>
		}
		break;
 8000e4a:	e11e      	b.n	800108a <modeRun+0x302>
	case MODE2:
			//In MODE2, we use button 2 and 3 to adjust duration of red light
			if (timer2_flag == 1) {
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <modeRun+0x260>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d116      	bne.n	8000e82 <modeRun+0xfa>
				setTimer2(500);
 8000e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e58:	f000 f9f8 	bl	800124c <setTimer2>
				blinkingRED();
 8000e5c:	f000 fae0 	bl	8001420 <blinkingRED>
				if (seg_counter == 2) {
 8000e60:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <modeRun+0x25c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d105      	bne.n	8000e74 <modeRun+0xec>
					segRun2();
 8000e68:	f7ff fd7e 	bl	8000968 <segRun2>
					seg_counter = 0;
 8000e6c:	4b5d      	ldr	r3, [pc, #372]	; (8000fe4 <modeRun+0x25c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e001      	b.n	8000e78 <modeRun+0xf0>
				} else {
					segRun1();
 8000e74:	f7ff fd64 	bl	8000940 <segRun1>
				}
				seg_counter++;
 8000e78:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <modeRun+0x25c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a59      	ldr	r2, [pc, #356]	; (8000fe4 <modeRun+0x25c>)
 8000e80:	6013      	str	r3, [r2, #0]
			}
			//if we press button 1, system will change to MODE3
			if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fd84 	bl	8000990 <isButtonPressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d113      	bne.n	8000eb6 <modeRun+0x12e>
				setTimer2(500);
 8000e8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e92:	f000 f9db 	bl	800124c <setTimer2>
				tempVal = yellowTime;
 8000e96:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <modeRun+0x274>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a57      	ldr	r2, [pc, #348]	; (8000ff8 <modeRun+0x270>)
 8000e9c:	6013      	str	r3, [r2, #0]
				ledModeData = MODE3;
 8000e9e:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <modeRun+0x268>)
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	601a      	str	r2, [r3, #0]
				ledValueData = yellowTime;
 8000ea4:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <modeRun+0x274>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a50      	ldr	r2, [pc, #320]	; (8000fec <modeRun+0x264>)
 8000eaa:	6013      	str	r3, [r2, #0]
				mode = MODE3;
 8000eac:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <modeRun+0x258>)
 8000eae:	2203      	movs	r2, #3
 8000eb0:	601a      	str	r2, [r3, #0]
				offAllLeds();
 8000eb2:	f000 fb1b 	bl	80014ec <offAllLeds>
			}
			//if we press button 2, duration of red light will increase 1s
			if (isButtonPressed(BUTTON_2_PRESS) == 1) {
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fd6a 	bl	8000990 <isButtonPressed>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10f      	bne.n	8000ee2 <modeRun+0x15a>
				if (tempVal > 99) {
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <modeRun+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b63      	cmp	r3, #99	; 0x63
 8000ec8:	dd02      	ble.n	8000ed0 <modeRun+0x148>
					tempVal = 1;
 8000eca:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <modeRun+0x270>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
				}
				tempVal++;
 8000ed0:	4b49      	ldr	r3, [pc, #292]	; (8000ff8 <modeRun+0x270>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <modeRun+0x270>)
 8000ed8:	6013      	str	r3, [r2, #0]
				ledValueData = tempVal;
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <modeRun+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a43      	ldr	r2, [pc, #268]	; (8000fec <modeRun+0x264>)
 8000ee0:	6013      	str	r3, [r2, #0]
			}
			//if we press button 3, system will save the change to red light
			if (isButtonPressed(BUTTON_3_PRESS) == 1) {
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fd54 	bl	8000990 <isButtonPressed>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	f040 80cf 	bne.w	800108e <modeRun+0x306>
				redTime = tempVal;
 8000ef0:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <modeRun+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a3f      	ldr	r2, [pc, #252]	; (8000ff4 <modeRun+0x26c>)
 8000ef6:	6013      	str	r3, [r2, #0]
				ledValueData = redTime;
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <modeRun+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a3b      	ldr	r2, [pc, #236]	; (8000fec <modeRun+0x264>)
 8000efe:	6013      	str	r3, [r2, #0]
			}
			break;
 8000f00:	e0c5      	b.n	800108e <modeRun+0x306>
			//MODE3 is similar to MODE2
		case MODE3:
			if (timer2_flag == 1) {
 8000f02:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <modeRun+0x260>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d116      	bne.n	8000f38 <modeRun+0x1b0>
				setTimer2(500);
 8000f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0e:	f000 f99d 	bl	800124c <setTimer2>
				blinkingYELLOW();
 8000f12:	f000 faa7 	bl	8001464 <blinkingYELLOW>
				if (seg_counter == 2) {
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <modeRun+0x25c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d105      	bne.n	8000f2a <modeRun+0x1a2>
					segRun2();
 8000f1e:	f7ff fd23 	bl	8000968 <segRun2>
					seg_counter = 0;
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <modeRun+0x25c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e001      	b.n	8000f2e <modeRun+0x1a6>
				} else {
					segRun1();
 8000f2a:	f7ff fd09 	bl	8000940 <segRun1>
				}
				seg_counter++;
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <modeRun+0x25c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a2b      	ldr	r2, [pc, #172]	; (8000fe4 <modeRun+0x25c>)
 8000f36:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fd29 	bl	8000990 <isButtonPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d113      	bne.n	8000f6c <modeRun+0x1e4>
				setTimer2(500);
 8000f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f48:	f000 f980 	bl	800124c <setTimer2>
				tempVal = greenTime;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <modeRun+0x278>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <modeRun+0x270>)
 8000f52:	6013      	str	r3, [r2, #0]
				ledModeData = MODE4;
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <modeRun+0x268>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	601a      	str	r2, [r3, #0]
				ledValueData = greenTime;
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <modeRun+0x278>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <modeRun+0x264>)
 8000f60:	6013      	str	r3, [r2, #0]
				mode = MODE4;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <modeRun+0x258>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	601a      	str	r2, [r3, #0]
				offAllLeds();
 8000f68:	f000 fac0 	bl	80014ec <offAllLeds>
			}
			if (isButtonPressed(BUTTON_2_PRESS) == 1) {
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fd0f 	bl	8000990 <isButtonPressed>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d10f      	bne.n	8000f98 <modeRun+0x210>
				if (tempVal > 99) {
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <modeRun+0x270>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b63      	cmp	r3, #99	; 0x63
 8000f7e:	dd02      	ble.n	8000f86 <modeRun+0x1fe>
					tempVal = 1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <modeRun+0x270>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
				}
				tempVal++;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <modeRun+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <modeRun+0x270>)
 8000f8e:	6013      	str	r3, [r2, #0]
				ledValueData = tempVal;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <modeRun+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <modeRun+0x264>)
 8000f96:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_3_PRESS) == 1) {
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fcf9 	bl	8000990 <isButtonPressed>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d176      	bne.n	8001092 <modeRun+0x30a>
				yellowTime = tempVal;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <modeRun+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <modeRun+0x274>)
 8000faa:	6013      	str	r3, [r2, #0]
				ledValueData = yellowTime;
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <modeRun+0x274>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <modeRun+0x264>)
 8000fb2:	6013      	str	r3, [r2, #0]
			}
			break;
 8000fb4:	e06d      	b.n	8001092 <modeRun+0x30a>
			//MODE4 is similar to MODE1
		case MODE4:
			if (timer2_flag == 1) {
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <modeRun+0x260>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d129      	bne.n	8001012 <modeRun+0x28a>
				setTimer2(500);
 8000fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc2:	f000 f943 	bl	800124c <setTimer2>
				blinkingGREEN();
 8000fc6:	f000 fa6f 	bl	80014a8 <blinkingGREEN>
				if (seg_counter == 2) {
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <modeRun+0x25c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d118      	bne.n	8001004 <modeRun+0x27c>
					segRun2();
 8000fd2:	f7ff fcc9 	bl	8000968 <segRun2>
					seg_counter = 0;
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <modeRun+0x25c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e014      	b.n	8001008 <modeRun+0x280>
 8000fde:	bf00      	nop
 8000fe0:	2000005c 	.word	0x2000005c
 8000fe4:	200000f0 	.word	0x200000f0
 8000fe8:	20000068 	.word	0x20000068
 8000fec:	20000090 	.word	0x20000090
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	200000ec 	.word	0x200000ec
 8000ffc:	20000094 	.word	0x20000094
 8001000:	200000a0 	.word	0x200000a0
				} else {
					segRun1();
 8001004:	f7ff fc9c 	bl	8000940 <segRun1>
				}
				seg_counter++;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <modeRun+0x314>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <modeRun+0x314>)
 8001010:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_1_PRESS) == 1) {
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fcbc 	bl	8000990 <isButtonPressed>
 8001018:	4603      	mov	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10e      	bne.n	800103c <modeRun+0x2b4>
				state = RED_GREEN_INIT;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <modeRun+0x318>)
 8001020:	2205      	movs	r2, #5
 8001022:	601a      	str	r2, [r3, #0]
				seg_counter = 2;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <modeRun+0x314>)
 8001026:	2202      	movs	r2, #2
 8001028:	601a      	str	r2, [r3, #0]
				segRun1();
 800102a:	f7ff fc89 	bl	8000940 <segRun1>
				setTimer2(500);
 800102e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001032:	f000 f90b 	bl	800124c <setTimer2>
				mode = MODE1;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <modeRun+0x31c>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(BUTTON_2_PRESS) == 1) {
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fca7 	bl	8000990 <isButtonPressed>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10f      	bne.n	8001068 <modeRun+0x2e0>
				if (tempVal > 99) {
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <modeRun+0x320>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b63      	cmp	r3, #99	; 0x63
 800104e:	dd02      	ble.n	8001056 <modeRun+0x2ce>
					tempVal = 1;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modeRun+0x320>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
				}
				tempVal++;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <modeRun+0x320>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <modeRun+0x320>)
 800105e:	6013      	str	r3, [r2, #0]
				ledValueData = tempVal;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <modeRun+0x320>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <modeRun+0x324>)
 8001066:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPressed(BUTTON_3_PRESS) == 1) {
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff fc91 	bl	8000990 <isButtonPressed>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d110      	bne.n	8001096 <modeRun+0x30e>
				greenTime = tempVal;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modeRun+0x320>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <modeRun+0x328>)
 800107a:	6013      	str	r3, [r2, #0]
				ledValueData = greenTime;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <modeRun+0x328>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <modeRun+0x324>)
 8001082:	6013      	str	r3, [r2, #0]
			}
			break;
 8001084:	e007      	b.n	8001096 <modeRun+0x30e>
	default:
		break;
 8001086:	bf00      	nop
 8001088:	e006      	b.n	8001098 <modeRun+0x310>
		break;
 800108a:	bf00      	nop
 800108c:	e004      	b.n	8001098 <modeRun+0x310>
			break;
 800108e:	bf00      	nop
 8001090:	e002      	b.n	8001098 <modeRun+0x310>
			break;
 8001092:	bf00      	nop
 8001094:	e000      	b.n	8001098 <modeRun+0x310>
			break;
 8001096:	bf00      	nop
	}
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000f0 	.word	0x200000f0
 80010a0:	20000030 	.word	0x20000030
 80010a4:	2000005c 	.word	0x2000005c
 80010a8:	200000ec 	.word	0x200000ec
 80010ac:	20000090 	.word	0x20000090
 80010b0:	200000a0 	.word	0x200000a0

080010b4 <mode1Run>:
 */

#include "normal_mode.h"
#include "global.h"

void mode1Run() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	switch (state) {
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <mode1Run+0x144>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	2b04      	cmp	r3, #4
 80010c0:	f200 808f 	bhi.w	80011e2 <mode1Run+0x12e>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <mode1Run+0x18>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080011a9 	.word	0x080011a9
 80010d0:	08001113 	.word	0x08001113
 80010d4:	08001141 	.word	0x08001141
 80010d8:	0800117b 	.word	0x0800117b
 80010dc:	080010e1 	.word	0x080010e1
	case RED_GREEN_INIT:
				setTimer1(greenTime * 1000);
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <mode1Run+0x148>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f891 	bl	8001214 <setTimer1>
				ledModeData = redTime;
 80010f2:	4b43      	ldr	r3, [pc, #268]	; (8001200 <mode1Run+0x14c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a43      	ldr	r2, [pc, #268]	; (8001204 <mode1Run+0x150>)
 80010f8:	6013      	str	r3, [r2, #0]
				ledValueData = greenTime;
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <mode1Run+0x148>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a42      	ldr	r2, [pc, #264]	; (8001208 <mode1Run+0x154>)
 8001100:	6013      	str	r3, [r2, #0]
				setRed1();
 8001102:	f000 fa17 	bl	8001534 <setRed1>
				setGreen2();
 8001106:	f000 fa83 	bl	8001610 <setGreen2>
				state = RED_YELLOW;
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <mode1Run+0x144>)
 800110c:	2202      	movs	r2, #2
 800110e:	601a      	str	r2, [r3, #0]
			break;
 8001110:	e070      	b.n	80011f4 <mode1Run+0x140>
		case RED_YELLOW:
			if (timer1_flag == 1) {
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <mode1Run+0x158>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d165      	bne.n	80011e6 <mode1Run+0x132>
				setTimer1(yellowTime * 1000);
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <mode1Run+0x15c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f874 	bl	8001214 <setTimer1>
				setYellow2();
 800112c:	f000 fa5a 	bl	80015e4 <setYellow2>
				ledValueData = yellowTime;
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <mode1Run+0x15c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a34      	ldr	r2, [pc, #208]	; (8001208 <mode1Run+0x154>)
 8001136:	6013      	str	r3, [r2, #0]
				state = GREEN_RED;
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <mode1Run+0x144>)
 800113a:	2203      	movs	r2, #3
 800113c:	601a      	str	r2, [r3, #0]
			}
			break;
 800113e:	e052      	b.n	80011e6 <mode1Run+0x132>
		case GREEN_RED:
			if (timer1_flag == 1) {
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <mode1Run+0x158>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d150      	bne.n	80011ea <mode1Run+0x136>
				setTimer1(greenTime * 1000);
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <mode1Run+0x148>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f85d 	bl	8001214 <setTimer1>
				setGreen1();
 800115a:	f000 fa17 	bl	800158c <setGreen1>
				setRed2();
 800115e:	f000 fa2b 	bl	80015b8 <setRed2>
				ledModeData = greenTime;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <mode1Run+0x148>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a27      	ldr	r2, [pc, #156]	; (8001204 <mode1Run+0x150>)
 8001168:	6013      	str	r3, [r2, #0]
				ledValueData = redTime;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <mode1Run+0x14c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a26      	ldr	r2, [pc, #152]	; (8001208 <mode1Run+0x154>)
 8001170:	6013      	str	r3, [r2, #0]
				state = YELLOW_RED;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <mode1Run+0x144>)
 8001174:	2204      	movs	r2, #4
 8001176:	601a      	str	r2, [r3, #0]
			}
			break;
 8001178:	e037      	b.n	80011ea <mode1Run+0x136>
		case YELLOW_RED:
			if (timer1_flag == 1) {
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <mode1Run+0x158>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d135      	bne.n	80011ee <mode1Run+0x13a>
				setTimer1(yellowTime * 1000);
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <mode1Run+0x15c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f840 	bl	8001214 <setTimer1>
				setYellow1();
 8001194:	f000 f9e4 	bl	8001560 <setYellow1>
				ledModeData = yellowTime;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <mode1Run+0x15c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <mode1Run+0x150>)
 800119e:	6013      	str	r3, [r2, #0]
				state = RED_GREEN;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <mode1Run+0x144>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80011a6:	e022      	b.n	80011ee <mode1Run+0x13a>
		case RED_GREEN:
			if (timer1_flag == 1) {
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <mode1Run+0x158>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d120      	bne.n	80011f2 <mode1Run+0x13e>
					setTimer1(greenTime * 1000);
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <mode1Run+0x148>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f829 	bl	8001214 <setTimer1>
					setRed1();
 80011c2:	f000 f9b7 	bl	8001534 <setRed1>
					setGreen2();
 80011c6:	f000 fa23 	bl	8001610 <setGreen2>
					ledModeData = redTime;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <mode1Run+0x14c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <mode1Run+0x150>)
 80011d0:	6013      	str	r3, [r2, #0]
					ledValueData = greenTime;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <mode1Run+0x148>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <mode1Run+0x154>)
 80011d8:	6013      	str	r3, [r2, #0]
					state = RED_YELLOW;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <mode1Run+0x144>)
 80011dc:	2202      	movs	r2, #2
 80011de:	601a      	str	r2, [r3, #0]
				}
			break;
 80011e0:	e007      	b.n	80011f2 <mode1Run+0x13e>
	default:
		break;
 80011e2:	bf00      	nop
 80011e4:	e006      	b.n	80011f4 <mode1Run+0x140>
			break;
 80011e6:	bf00      	nop
 80011e8:	e004      	b.n	80011f4 <mode1Run+0x140>
			break;
 80011ea:	bf00      	nop
 80011ec:	e002      	b.n	80011f4 <mode1Run+0x140>
			break;
 80011ee:	bf00      	nop
 80011f0:	e000      	b.n	80011f4 <mode1Run+0x140>
			break;
 80011f2:	bf00      	nop
	}
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000030 	.word	0x20000030
 80011fc:	200000a0 	.word	0x200000a0
 8001200:	2000009c 	.word	0x2000009c
 8001204:	20000098 	.word	0x20000098
 8001208:	20000090 	.word	0x20000090
 800120c:	20000060 	.word	0x20000060
 8001210:	20000094 	.word	0x20000094

08001214 <setTimer1>:
int timer2_counter = 0;

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <setTimer1+0x2c>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	4a06      	ldr	r2, [pc, #24]	; (8001244 <setTimer1+0x30>)
 800122c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <setTimer1+0x34>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	66666667 	.word	0x66666667
 8001244:	20000064 	.word	0x20000064
 8001248:	20000060 	.word	0x20000060

0800124c <setTimer2>:

void setTimer2(int duration) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <setTimer2+0x2c>)
 8001258:	fb82 1203 	smull	r1, r2, r2, r3
 800125c:	1092      	asrs	r2, r2, #2
 800125e:	17db      	asrs	r3, r3, #31
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	4a06      	ldr	r2, [pc, #24]	; (800127c <setTimer2+0x30>)
 8001264:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <setTimer2+0x34>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	66666667 	.word	0x66666667
 800127c:	2000006c 	.word	0x2000006c
 8001280:	20000068 	.word	0x20000068

08001284 <timerRun>:
void setTimer3(int duration) {
	timer3_counter = duration / TIMER_CYCLE;
	timer3_flag = 0;
}

void timerRun() {
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <timerRun+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd05      	ble.n	800129c <timerRun+0x18>
		timer1_counter--;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <timerRun+0x68>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <timerRun+0x68>)
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e004      	b.n	80012a6 <timerRun+0x22>
	} else {
		timer1_flag++;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <timerRun+0x6c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <timerRun+0x6c>)
 80012a4:	6013      	str	r3, [r2, #0]
	}

	if (timer2_counter > 0) {
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <timerRun+0x70>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dd05      	ble.n	80012ba <timerRun+0x36>
		timer2_counter--;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <timerRun+0x70>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <timerRun+0x70>)
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e004      	b.n	80012c4 <timerRun+0x40>
	} else {
		timer2_flag++;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <timerRun+0x74>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <timerRun+0x74>)
 80012c2:	6013      	str	r3, [r2, #0]
	}

	if (timer3_counter > 0) {
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <timerRun+0x78>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dd05      	ble.n	80012d8 <timerRun+0x54>
		timer3_counter--;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <timerRun+0x78>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <timerRun+0x78>)
 80012d4:	6013      	str	r3, [r2, #0]
	} else {
		timer3_flag++;
	}
}
 80012d6:	e004      	b.n	80012e2 <timerRun+0x5e>
		timer3_flag++;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <timerRun+0x7c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <timerRun+0x7c>)
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000064 	.word	0x20000064
 80012f0:	20000060 	.word	0x20000060
 80012f4:	2000006c 	.word	0x2000006c
 80012f8:	20000068 	.word	0x20000068
 80012fc:	20000074 	.word	0x20000074
 8001300:	20000070 	.word	0x20000070

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <HAL_MspInit+0x5c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_MspInit+0x5c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_MspInit+0x60>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_MspInit+0x60>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000

08001368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001378:	d113      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_TIM_Base_MspInit+0x44>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_TIM_Base_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_TIM_Base_MspInit+0x44>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	201c      	movs	r0, #28
 8001398:	f000 faaf 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800139c:	201c      	movs	r0, #28
 800139e:	f000 fac8 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 f98d 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM2_IRQHandler+0x10>)
 8001406:	f001 f8e9 	bl	80025dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000a4 	.word	0x200000a4

08001414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <blinkingRED>:
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, ON);
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, ON);
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, ON);
}
//this function is used to blink all leds
void blinkingRED(){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8001424:	2102      	movs	r1, #2
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <blinkingRED+0x40>)
 8001428:	f000 fc47 	bl	8001cba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, OFF);
 800142c:	2201      	movs	r2, #1
 800142e:	2104      	movs	r1, #4
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <blinkingRED+0x40>)
 8001432:	f000 fc2a 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, OFF);
 8001436:	2201      	movs	r2, #1
 8001438:	2108      	movs	r1, #8
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <blinkingRED+0x40>)
 800143c:	f000 fc25 	bl	8001c8a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8001440:	2110      	movs	r1, #16
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <blinkingRED+0x40>)
 8001444:	f000 fc39 	bl	8001cba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, OFF);
 8001448:	2201      	movs	r2, #1
 800144a:	2120      	movs	r1, #32
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <blinkingRED+0x40>)
 800144e:	f000 fc1c 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, OFF);
 8001452:	2201      	movs	r2, #1
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <blinkingRED+0x40>)
 8001458:	f000 fc17 	bl	8001c8a <HAL_GPIO_WritePin>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40010800 	.word	0x40010800

08001464 <blinkingYELLOW>:
void blinkingYELLOW(){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8001468:	2104      	movs	r1, #4
 800146a:	480e      	ldr	r0, [pc, #56]	; (80014a4 <blinkingYELLOW+0x40>)
 800146c:	f000 fc25 	bl	8001cba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, OFF);
 8001470:	2201      	movs	r2, #1
 8001472:	2102      	movs	r1, #2
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <blinkingYELLOW+0x40>)
 8001476:	f000 fc08 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, OFF);
 800147a:	2201      	movs	r2, #1
 800147c:	2108      	movs	r1, #8
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <blinkingYELLOW+0x40>)
 8001480:	f000 fc03 	bl	8001c8a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8001484:	2120      	movs	r1, #32
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <blinkingYELLOW+0x40>)
 8001488:	f000 fc17 	bl	8001cba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, OFF);
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <blinkingYELLOW+0x40>)
 8001492:	f000 fbfa 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, OFF);
 8001496:	2201      	movs	r2, #1
 8001498:	2140      	movs	r1, #64	; 0x40
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <blinkingYELLOW+0x40>)
 800149c:	f000 fbf5 	bl	8001c8a <HAL_GPIO_WritePin>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40010800 	.word	0x40010800

080014a8 <blinkingGREEN>:
void blinkingGREEN(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 80014ac:	2108      	movs	r1, #8
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <blinkingGREEN+0x40>)
 80014b0:	f000 fc03 	bl	8001cba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, OFF);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2104      	movs	r1, #4
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <blinkingGREEN+0x40>)
 80014ba:	f000 fbe6 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, OFF);
 80014be:	2201      	movs	r2, #1
 80014c0:	2102      	movs	r1, #2
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <blinkingGREEN+0x40>)
 80014c4:	f000 fbe1 	bl	8001c8a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <blinkingGREEN+0x40>)
 80014cc:	f000 fbf5 	bl	8001cba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, OFF);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2120      	movs	r1, #32
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <blinkingGREEN+0x40>)
 80014d6:	f000 fbd8 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, OFF);
 80014da:	2201      	movs	r2, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <blinkingGREEN+0x40>)
 80014e0:	f000 fbd3 	bl	8001c8a <HAL_GPIO_WritePin>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40010800 	.word	0x40010800

080014ec <offAllLeds>:
//this function is used to turn off all leds
void offAllLeds() {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, OFF);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2102      	movs	r1, #2
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <offAllLeds+0x44>)
 80014f6:	f000 fbc8 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, OFF);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2104      	movs	r1, #4
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <offAllLeds+0x44>)
 8001500:	f000 fbc3 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, OFF);
 8001504:	2201      	movs	r2, #1
 8001506:	2108      	movs	r1, #8
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <offAllLeds+0x44>)
 800150a:	f000 fbbe 	bl	8001c8a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, OFF);
 800150e:	2201      	movs	r2, #1
 8001510:	2110      	movs	r1, #16
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <offAllLeds+0x44>)
 8001514:	f000 fbb9 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, OFF);
 8001518:	2201      	movs	r2, #1
 800151a:	2120      	movs	r1, #32
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <offAllLeds+0x44>)
 800151e:	f000 fbb4 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, OFF);
 8001522:	2201      	movs	r2, #1
 8001524:	2140      	movs	r1, #64	; 0x40
 8001526:	4802      	ldr	r0, [pc, #8]	; (8001530 <offAllLeds+0x44>)
 8001528:	f000 fbaf 	bl	8001c8a <HAL_GPIO_WritePin>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40010800 	.word	0x40010800

08001534 <setRed1>:

void setRed1() {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, ON);
 8001538:	2200      	movs	r2, #0
 800153a:	2102      	movs	r1, #2
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <setRed1+0x28>)
 800153e:	f000 fba4 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, OFF);
 8001542:	2201      	movs	r2, #1
 8001544:	2104      	movs	r1, #4
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <setRed1+0x28>)
 8001548:	f000 fb9f 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, OFF);
 800154c:	2201      	movs	r2, #1
 800154e:	2108      	movs	r1, #8
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <setRed1+0x28>)
 8001552:	f000 fb9a 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40010800 	.word	0x40010800

08001560 <setYellow1>:
void setYellow1() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, OFF);
 8001564:	2201      	movs	r2, #1
 8001566:	2102      	movs	r1, #2
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <setYellow1+0x28>)
 800156a:	f000 fb8e 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, ON);
 800156e:	2200      	movs	r2, #0
 8001570:	2104      	movs	r1, #4
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <setYellow1+0x28>)
 8001574:	f000 fb89 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, OFF);
 8001578:	2201      	movs	r2, #1
 800157a:	2108      	movs	r1, #8
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <setYellow1+0x28>)
 800157e:	f000 fb84 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40010800 	.word	0x40010800

0800158c <setGreen1>:
void setGreen1() {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, OFF);
 8001590:	2201      	movs	r2, #1
 8001592:	2102      	movs	r1, #2
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <setGreen1+0x28>)
 8001596:	f000 fb78 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, OFF);
 800159a:	2201      	movs	r2, #1
 800159c:	2104      	movs	r1, #4
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <setGreen1+0x28>)
 80015a0:	f000 fb73 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, ON);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2108      	movs	r1, #8
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <setGreen1+0x28>)
 80015aa:	f000 fb6e 	bl	8001c8a <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40010800 	.word	0x40010800

080015b8 <setRed2>:

void setRed2() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, ON);
 80015bc:	2200      	movs	r2, #0
 80015be:	2110      	movs	r1, #16
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <setRed2+0x28>)
 80015c2:	f000 fb62 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, OFF);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2120      	movs	r1, #32
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <setRed2+0x28>)
 80015cc:	f000 fb5d 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, OFF);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <setRed2+0x28>)
 80015d6:	f000 fb58 	bl	8001c8a <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010800 	.word	0x40010800

080015e4 <setYellow2>:
void setYellow2() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, OFF);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2110      	movs	r1, #16
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <setYellow2+0x28>)
 80015ee:	f000 fb4c 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, ON);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2120      	movs	r1, #32
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <setYellow2+0x28>)
 80015f8:	f000 fb47 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, OFF);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <setYellow2+0x28>)
 8001602:	f000 fb42 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40010800 	.word	0x40010800

08001610 <setGreen2>:
void setGreen2() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, OFF);
 8001614:	2201      	movs	r2, #1
 8001616:	2110      	movs	r1, #16
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <setGreen2+0x28>)
 800161a:	f000 fb36 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, OFF);
 800161e:	2201      	movs	r2, #1
 8001620:	2120      	movs	r1, #32
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <setGreen2+0x28>)
 8001624:	f000 fb31 	bl	8001c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, ON);
 8001628:	2200      	movs	r2, #0
 800162a:	2140      	movs	r1, #64	; 0x40
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <setGreen2+0x28>)
 800162e:	f000 fb2c 	bl	8001c8a <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010800 	.word	0x40010800

0800163c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800163c:	f7ff feea 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001642:	490c      	ldr	r1, [pc, #48]	; (8001674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001644:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001658:	4c09      	ldr	r4, [pc, #36]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f001 fb05 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166a:	f7ff fa7d 	bl	8000b68 <main>
  bx lr
 800166e:	4770      	bx	lr
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001678:	08002d10 	.word	0x08002d10
  ldr r2, =_sbss
 800167c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001680:	200000f8 	.word	0x200000f8

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x28>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x28>)
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f923 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fe2e 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40022000 	.word	0x40022000

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f93b 	bl	800194e <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f903 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000034 	.word	0x20000034
 800170c:	2000003c 	.word	0x2000003c
 8001710:	20000038 	.word	0x20000038

08001714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_IncTick+0x1c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_IncTick+0x20>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <HAL_IncTick+0x20>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	2000003c 	.word	0x2000003c
 8001734:	200000f4 	.word	0x200000f4

08001738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <HAL_GetTick+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	200000f4 	.word	0x200000f4

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4906      	ldr	r1, [pc, #24]	; (80017e4 <__NVIC_EnableIRQ+0x34>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff90 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff2d 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff42 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff90 	bl	800183c <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5f 	bl	80017e8 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff35 	bl	80017b0 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b08b      	sub	sp, #44	; 0x2c
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	e148      	b.n	8001c0e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800197c:	2201      	movs	r2, #1
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	429a      	cmp	r2, r3
 8001996:	f040 8137 	bne.w	8001c08 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4aa3      	ldr	r2, [pc, #652]	; (8001c2c <HAL_GPIO_Init+0x2c4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d05e      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019a4:	4aa1      	ldr	r2, [pc, #644]	; (8001c2c <HAL_GPIO_Init+0x2c4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d875      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019aa:	4aa1      	ldr	r2, [pc, #644]	; (8001c30 <HAL_GPIO_Init+0x2c8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d058      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019b0:	4a9f      	ldr	r2, [pc, #636]	; (8001c30 <HAL_GPIO_Init+0x2c8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d86f      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019b6:	4a9f      	ldr	r2, [pc, #636]	; (8001c34 <HAL_GPIO_Init+0x2cc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d052      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019bc:	4a9d      	ldr	r2, [pc, #628]	; (8001c34 <HAL_GPIO_Init+0x2cc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d869      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019c2:	4a9d      	ldr	r2, [pc, #628]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04c      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019c8:	4a9b      	ldr	r2, [pc, #620]	; (8001c38 <HAL_GPIO_Init+0x2d0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d863      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019ce:	4a9b      	ldr	r2, [pc, #620]	; (8001c3c <HAL_GPIO_Init+0x2d4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d046      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
 80019d4:	4a99      	ldr	r2, [pc, #612]	; (8001c3c <HAL_GPIO_Init+0x2d4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d85d      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d82a      	bhi.n	8001a34 <HAL_GPIO_Init+0xcc>
 80019de:	2b12      	cmp	r3, #18
 80019e0:	d859      	bhi.n	8001a96 <HAL_GPIO_Init+0x12e>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <HAL_GPIO_Init+0x80>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	08001a63 	.word	0x08001a63
 80019ec:	08001a3d 	.word	0x08001a3d
 80019f0:	08001a4f 	.word	0x08001a4f
 80019f4:	08001a91 	.word	0x08001a91
 80019f8:	08001a97 	.word	0x08001a97
 80019fc:	08001a97 	.word	0x08001a97
 8001a00:	08001a97 	.word	0x08001a97
 8001a04:	08001a97 	.word	0x08001a97
 8001a08:	08001a97 	.word	0x08001a97
 8001a0c:	08001a97 	.word	0x08001a97
 8001a10:	08001a97 	.word	0x08001a97
 8001a14:	08001a97 	.word	0x08001a97
 8001a18:	08001a97 	.word	0x08001a97
 8001a1c:	08001a97 	.word	0x08001a97
 8001a20:	08001a97 	.word	0x08001a97
 8001a24:	08001a97 	.word	0x08001a97
 8001a28:	08001a97 	.word	0x08001a97
 8001a2c:	08001a45 	.word	0x08001a45
 8001a30:	08001a59 	.word	0x08001a59
 8001a34:	4a82      	ldr	r2, [pc, #520]	; (8001c40 <HAL_GPIO_Init+0x2d8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a3a:	e02c      	b.n	8001a96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e029      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e024      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	3308      	adds	r3, #8
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e01f      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e01a      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e013      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	611a      	str	r2, [r3, #16]
          break;
 8001a82:	e009      	b.n	8001a98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	615a      	str	r2, [r3, #20]
          break;
 8001a8e:	e003      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x130>
          break;
 8001a96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	d801      	bhi.n	8001aa2 <HAL_GPIO_Init+0x13a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	e001      	b.n	8001aa6 <HAL_GPIO_Init+0x13e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d802      	bhi.n	8001ab4 <HAL_GPIO_Init+0x14c>
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x152>
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3b08      	subs	r3, #8
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	6a39      	ldr	r1, [r7, #32]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8090 	beq.w	8001c08 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae8:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x2dc>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a55      	ldr	r2, [pc, #340]	; (8001c44 <HAL_GPIO_Init+0x2dc>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_GPIO_Init+0x2dc>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b00:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <HAL_GPIO_Init+0x2e0>)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <HAL_GPIO_Init+0x2e4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_GPIO_Init+0x1e0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a48      	ldr	r2, [pc, #288]	; (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x1dc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <HAL_GPIO_Init+0x2ec>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_GPIO_Init+0x1d8>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e004      	b.n	8001b4a <HAL_GPIO_Init+0x1e2>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x1e2>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_GPIO_Init+0x1e2>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	4093      	lsls	r3, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5a:	493b      	ldr	r1, [pc, #236]	; (8001c48 <HAL_GPIO_Init+0x2e0>)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4937      	ldr	r1, [pc, #220]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4933      	ldr	r1, [pc, #204]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	492d      	ldr	r1, [pc, #180]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4929      	ldr	r1, [pc, #164]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4923      	ldr	r1, [pc, #140]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	491f      	ldr	r1, [pc, #124]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4919      	ldr	r1, [pc, #100]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4915      	ldr	r1, [pc, #84]	; (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f47f aeaf 	bne.w	800197c <HAL_GPIO_Init+0x14>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	372c      	adds	r7, #44	; 0x2c
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	10320000 	.word	0x10320000
 8001c30:	10310000 	.word	0x10310000
 8001c34:	10220000 	.word	0x10220000
 8001c38:	10210000 	.word	0x10210000
 8001c3c:	10120000 	.word	0x10120000
 8001c40:	10110000 	.word	0x10110000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	40010c00 	.word	0x40010c00
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	807b      	strh	r3, [r7, #2]
 8001c96:	4613      	mov	r3, r2
 8001c98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9a:	787b      	ldrb	r3, [r7, #1]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca6:	e003      	b.n	8001cb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	041a      	lsls	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	041a      	lsls	r2, r3, #16
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	400b      	ands	r3, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e26c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8087 	beq.w	8001e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d00c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d112      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5e>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d10b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x12c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d168      	bne.n	8001e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e246      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x76>
 8001d54:	4b80      	ldr	r3, [pc, #512]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a7f      	ldr	r2, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e02e      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b78      	ldr	r3, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a77      	ldr	r2, [pc, #476]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0xbc>
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a71      	ldr	r2, [pc, #452]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fcb6 	bl	8001738 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fcb2 	bl	8001738 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1fa      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe4>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fca2 	bl	8001738 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fc9e 	bl	8001738 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1e6      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x10c>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e32:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x18c>
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1ba      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4939      	ldr	r1, [pc, #228]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fc57 	bl	8001738 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fc53 	bl	8001738 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e19b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fc36 	bl	8001738 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fc32 	bl	8001738 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e17a      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03a      	beq.n	8001f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff fc16 	bl	8001738 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fc12 	bl	8001738 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e15a      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 fa9a 	bl	8002468 <RCC_Delay>
 8001f34:	e01c      	b.n	8001f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fbfc 	bl	8001738 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f42:	e00f      	b.n	8001f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fbf8 	bl	8001738 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d908      	bls.n	8001f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e140      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	42420000 	.word	0x42420000
 8001f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b9e      	ldr	r3, [pc, #632]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e9      	bne.n	8001f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a6 	beq.w	80020ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b97      	ldr	r3, [pc, #604]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a93      	ldr	r2, [pc, #588]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b8e      	ldr	r3, [pc, #568]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8a      	ldr	r2, [pc, #552]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fbb9 	bl	8001738 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff fbb5 	bl	8001738 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0fd      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x312>
 8001ff0:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e02d      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x334>
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a72      	ldr	r2, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	e01c      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x356>
 8002028:	4b6d      	ldr	r3, [pc, #436]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a66      	ldr	r2, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a63      	ldr	r2, [pc, #396]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fb69 	bl	8001738 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7ff fb65 	bl	8001738 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0ab      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ee      	beq.n	800206a <HAL_RCC_OscConfig+0x37e>
 800208c:	e014      	b.n	80020b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff fb53 	bl	8001738 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fb4f 	bl	8001738 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e095      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a47      	ldr	r2, [pc, #284]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8081 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b42      	ldr	r3, [pc, #264]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d061      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d146      	bne.n	8002176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x4fc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fb23 	bl	8001738 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff fb1f 	bl	8001738 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e067      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002108:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d108      	bne.n	8002130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	492d      	ldr	r1, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a19      	ldr	r1, [r3, #32]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	430b      	orrs	r3, r1
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x4fc>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff faf3 	bl	8001738 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff faef 	bl	8001738 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e037      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x46a>
 8002174:	e02f      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_OscConfig+0x4fc>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fadc 	bl	8001738 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff fad8 	bl	8001738 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e020      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x498>
 80021a2:	e018      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e013      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
 80021e8:	42420060 	.word	0x42420060

080021ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0d0      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4965      	ldr	r1, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800226a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d040      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e073      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e06b      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4936      	ldr	r1, [pc, #216]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff fa2c 	bl	8001738 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff fa28 	bl	8001738 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e053      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d210      	bcs.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4922      	ldr	r1, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237a:	f000 f821 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f98a 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08002ce4 	.word	0x08002ce4
 80023b8:	20000034 	.word	0x20000034
 80023bc:	20000038 	.word	0x20000038

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <HAL_RCC_GetSysClockFreq+0x94>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ee:	e027      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 80023f2:	613b      	str	r3, [r7, #16]
      break;
 80023f4:	e027      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0c9b      	lsrs	r3, r3, #18
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_GetSysClockFreq+0x94>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0c5b      	lsrs	r3, r3, #17
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 8002422:	fb02 f203 	mul.w	r2, r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e004      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	613b      	str	r3, [r7, #16]
      break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 8002442:	613b      	str	r3, [r7, #16]
      break;
 8002444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002446:	693b      	ldr	r3, [r7, #16]
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	007a1200 	.word	0x007a1200
 800245c:	08002cf4 	.word	0x08002cf4
 8002460:	08002d04 	.word	0x08002d04
 8002464:	003d0900 	.word	0x003d0900

08002468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <RCC_Delay+0x34>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <RCC_Delay+0x38>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0a5b      	lsrs	r3, r3, #9
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002484:	bf00      	nop
  }
  while (Delay --);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	60fa      	str	r2, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f9      	bne.n	8002484 <RCC_Delay+0x1c>
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000034 	.word	0x20000034
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e041      	b.n	800253a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe ff4c 	bl	8001368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 fa6e 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d001      	beq.n	800255c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e035      	b.n	80025c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <HAL_TIM_Base_Start_IT+0x90>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d009      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0x4e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d004      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0x4e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <HAL_TIM_Base_Start_IT+0x94>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d111      	bne.n	80025b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d010      	beq.n	80025c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b4:	e007      	b.n	80025c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40000400 	.word	0x40000400

080025dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0202 	mvn.w	r2, #2
 8002608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f9b4 	bl	800298c <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f9a7 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f9b6 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b04      	cmp	r3, #4
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0204 	mvn.w	r2, #4
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f98a 	bl	800298c <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f97d 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f98c 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b08      	cmp	r3, #8
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0208 	mvn.w	r2, #8
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2204      	movs	r2, #4
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f960 	bl	800298c <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f953 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f962 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0210 	mvn.w	r2, #16
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2208      	movs	r2, #8
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f936 	bl	800298c <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f929 	bl	800297a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f938 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10e      	bne.n	8002760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0201 	mvn.w	r2, #1
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fb02 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d10e      	bne.n	800278c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d107      	bne.n	800278c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fa6b 	bl	8002c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d107      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8fc 	bl	80029b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0220 	mvn.w	r2, #32
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fa36 	bl	8002c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e0b4      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x186>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d03e      	beq.n	80028c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	f200 8087 	bhi.w	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	f000 8086 	beq.w	800295e <HAL_TIM_ConfigClockSource+0x172>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d87f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d01a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xa6>
 800285c:	2b70      	cmp	r3, #112	; 0x70
 800285e:	d87b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d050      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x11a>
 8002864:	2b60      	cmp	r3, #96	; 0x60
 8002866:	d877      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d03c      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xfa>
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d873      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d058      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x13a>
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d86f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d064      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 800287c:	2b30      	cmp	r3, #48	; 0x30
 800287e:	d86b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d060      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d867      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05c      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d05a      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 8002890:	e062      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f000 f95e 	bl	8002b62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	609a      	str	r2, [r3, #8]
      break;
 80028be:	e04f      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f000 f947 	bl	8002b62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e2:	609a      	str	r2, [r3, #8]
      break;
 80028e4:	e03c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8be 	bl	8002a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2150      	movs	r1, #80	; 0x50
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f915 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002904:	e02c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8dc 	bl	8002ad0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2160      	movs	r1, #96	; 0x60
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f905 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002924:	e01c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f89e 	bl	8002a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2140      	movs	r1, #64	; 0x40
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f8f5 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002944:	e00c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f000 f8ec 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002956:	e003      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e000      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800295e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0xa8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <TIM_Base_SetConfig+0x28>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d003      	beq.n	80029ec <TIM_Base_SetConfig+0x28>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <TIM_Base_SetConfig+0xac>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <TIM_Base_SetConfig+0xa8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0x52>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0x52>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <TIM_Base_SetConfig+0xac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <TIM_Base_SetConfig+0xa8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400

08002a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0201 	bic.w	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 030a 	bic.w	r3, r3, #10
 8002ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0210 	bic.w	r2, r3, #16
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	031b      	lsls	r3, r3, #12
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 0307 	orr.w	r3, r3, #7
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b087      	sub	sp, #28
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	021a      	lsls	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	609a      	str	r2, [r3, #8]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e041      	b.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d004      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10c      	bne.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400

08002c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2600      	movs	r6, #0
 8002c78:	4d0c      	ldr	r5, [pc, #48]	; (8002cac <__libc_init_array+0x38>)
 8002c7a:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	f000 f822 	bl	8002ccc <_init>
 8002c88:	2600      	movs	r6, #0
 8002c8a:	4d0a      	ldr	r5, [pc, #40]	; (8002cb4 <__libc_init_array+0x40>)
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <__libc_init_array+0x44>)
 8002c8e:	1b64      	subs	r4, r4, r5
 8002c90:	10a4      	asrs	r4, r4, #2
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08002d08 	.word	0x08002d08
 8002cb0:	08002d08 	.word	0x08002d08
 8002cb4:	08002d08 	.word	0x08002d08
 8002cb8:	08002d0c 	.word	0x08002d0c

08002cbc <memset>:
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4402      	add	r2, r0
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d100      	bne.n	8002cc6 <memset+0xa>
 8002cc4:	4770      	bx	lr
 8002cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cca:	e7f9      	b.n	8002cc0 <memset+0x4>

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
